/** ABOUTME: Build script for backend projects */
import { readdirSync, existsSync, writeFileSync, mkdirSync } from 'fs'
import { join, dirname } from 'path'

function discoverProjects() {
  const projectsPath = join(process.cwd(), 'projects')

  if (!existsSync(projectsPath)) {
    return []
  }

  const projects = []
  const projectDirs = readdirSync(projectsPath, { withFileTypes: true })

  for (const dir of projectDirs) {
    if (dir.isDirectory()) {
      const projectPath = join(projectsPath, dir.name)
      const entryFile = join(projectPath, 'index.ts')

      if (existsSync(entryFile)) {
        projects.push({
          name: dir.name,
          path: projectPath,
          entryFile
        })
      }
    }
  }

  return projects
}

function generateProjectsIndex() {
  const projects = discoverProjects()

  let content = `/** ABOUTME: Auto-generated backend projects index */\n`
  content += `// Generated by: node src/scripts/build-projects.ts   , run \`pnpm build:projects\`\n`
  content += `// Generated at: ${new Date().toISOString()}\n`
  content += `// DO NOT EDIT !!! - This file is automatically generated\n\n`

  // 直接导入所有项目并导出
  projects.forEach(project => {
    const varName = project.name.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase())
    content += `import * as ${varName} from '../../projects/${project.name}/index';\n`
  })

  content += `\n/** 所有后端项目聚合 */\n`
  content += `export const projects = {\n`

  projects.forEach(project => {
    const varName = project.name.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase())
    content += `  '${project.name}': ${varName},\n`
  })

  content += `};\n\n`


  return content
}

async function main() {
  console.log('🚀 Building backend projects...')

  try {
    // 0. 预检查：确保项目目录存在
    const projectsPath = join(process.cwd(), 'projects')
    if (!existsSync(projectsPath)) {
      console.warn('⚠️ Projects directory not found, skipping build')
      console.log('   To enable backend projects, create the projects directory')
      return
    }

    // 1. 生成 projects/index.ts 文件
    console.log('📦 Step 1: Generating projects index...')

    const projectsIndexContent = generateProjectsIndex()
    const projectsIndexPath = join(process.cwd(), 'src/projects/index.ts')

    // 确保目录存在
    const dir = dirname(projectsIndexPath)
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true })
    }

    writeFileSync(projectsIndexPath, projectsIndexContent, 'utf8')
    console.log('✅ Projects index generated successfully')

    // 2. 重新构建主库
    console.log('🔨 Step 2: Rebuilding main library...')
    const { execSync } = await import('child_process')
    execSync('pnpm build:lib', {
      cwd: process.cwd(),
      stdio: 'inherit'
    })

    console.log('🎉 Backend projects built successfully!')
  } catch (error) {
    console.error('❌ Build failed:', error)
    if (error instanceof Error) {
      console.error('   Error details:', error.message)
    }
    process.exit(1)
  }
}

main()