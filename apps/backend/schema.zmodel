// This is a sample model to get you started.

/// A sample data source using local sqlite db.
datasource db {
    provider = 'sqlite'
    url = env('DATABASE_URL')
}

generator client {
    provider = "prisma-client-js"
    // 不要配置这个！！会与 zenstack 冲突
    // output   = "client"
}

///  https://zenstack.dev/docs/guides/multiple-schema#abstract-model-inheritance
// 控制所有模型的通用鉴权策略
abstract model BaseAuth {
    /// 通过多对多的关系来实现用户角色的鉴权，允许管理员角色进行所有操作
    @@allow('all', auth().role?[name == 'admin'])
    /// 禁止未登录用户进行任何操作
    @@deny('all', !auth())
}
// 控制一些通用附加字段（模型本身不会再定义这些字段）
abstract model BaseTime extends BaseAuth {
    created DateTime @default(now())
    updated DateTime @updatedAt
    // 禁止修改创建时间
    @@deny('update', future().created != created)
}
abstract model BaseId {
    id Int @id @default(autoincrement())
    // 禁止修改 id
    @@deny('update', future().id != id)
}
// 控制一些可能会被重写的字段，
abstract model Base extends BaseTime, BaseId {
}


/// 角色
model Role extends Base {
    name  String @unique
    users User[]
    @@allow("read",!!auth())
}

/// User model
model User extends BaseTime {
    id           String         @id @default(cuid())
    // 禁止修改 id
    @@allow('update', future().id == id)
    email        String         @unique @length(6, 32)
    password     String         @password @omit
    posts        Post[]
    role         Role[]

    userSession  UserSession[]
    /// 允许用户读取和更新自己的信息
    @@allow('read', auth() == this)
    /// 禁止未登录用户进行任何操作
    @@deny('all', !auth())

    file         File[]
    avatar       String?

    userData     UserData[]

    oAuthAccount OAuthAccount[]

    word         Word[]
}

/// UserSession 用于存储用户的登录会话信息。每个会话都有一个唯一的 token 和过期时间。
model UserSession extends Base {
    token     String   @default(cuid())
    expiresAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id])

    /// 只允许用户读取和创建
    @@allow('read,create', auth() == user)
    @@deny('all',expiresAt < now())
}

enum OauthProvider {
    GITHUB
}
/// 第三方账号关联
model OAuthAccount extends Base {
    userId     String        // 关联的用户ID
    user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

    provider   OauthProvider // 第三方提供商名称，
    providerId String        // 第三方提供商的唯一标识符
    // 用户资料数据
    profile    Json?         // 存储原始的用户资料数据

    // 权限控制，绝对不应该让用户可以直接修改这里的数据，否则就能顶替别人的账号了
    @@allow('read', auth() == user)
    @@allow('create,update,delete', auth().role?[name == 'admin'])
}

// 存储策略枚举
enum StorageType {
    LOCAL
    S3
}

enum FileStatusEnum {
    public
    private
    protected
    deleted
}
model File extends Base {
    filename    String      // 原始文件名
    mimetype    String      // 文件类型
    size        Int         // 文件大小（字节）
    path        String      // 存储路径或URL
    storageType StorageType // 存储类型
    metadata    Json?       // 额外的元数据
    status      FileStatusEnum @default(public)// 文件状态
    author      User           @relation(fields: [authorId], references: [id])
    authorId    String
    @@allow('read,create', auth() == author)
}


enum LogLevel {
    DEBUG
    INFO
    WARN
    ERROR
}
model SystemLog extends BaseId,BaseAuth {
    reqId      String
    level      LogLevel
    message    String?
    logs       Json?
    authUserId String?
    created    DateTime @default(now())
}
/// 用户数据存储模型 - 用于存储用户的应用JSON数据
model UserData extends Base {
    // 数据标识符，可用于区分不同类型或用途的数据
    key         String
    // 实际存储的JSON数据
    data        Json
    // 数据描述（可选）
    description String?
    // 版本号，用于处理数据更新冲突
    version     Int     @default(1)
    // 关联的用户
    user        User    @relation(fields: [userId], references: [id])
    userId      String
    // 标签，用于分类和搜索
    tags        String?
    // 应用标识符，用于区分不同应用的数据
    appId       String?

    // 用户和key的组合唯一索引，确保每个用户的每个key只有一条记录
    @@unique([userId, key, appId])

    // 权限控制：用户只能读取和操作自己的数据
    @@allow('read,create,update,delete', auth() == user)
}

/// 任务队列处理
model Queue extends Base {
    name        String    // 队列名称，可用于区分不同类型的任务
    payload     Json    // 任务数据，JSON 格式
    status      String    // PENDING, PROCESSING, COMPLETED, FAILED
    priority    Int       @default(0) // 优先级，数字越大优先级越高
    attempts    Int       @default(0) // 尝试次数
    maxAttempts Int       @default(3) // 最大尝试次数
    workerId    String?   // 处理该任务的消费者ID
    result      String?   // 处理结果，JSON 格式
    error       String?   // 错误信息
    startedAt   DateTime? // 开始处理时间
    completedAt DateTime? // 完成时间
    runAt       DateTime  @default(now()) // 计划执行时间，支持延迟任务

    @@index([status, runAt, priority]) // 索引优化查询性能
    @@index([name, status]) // 按队列名称和状态查询
    @@index([workerId, status]) // 按工作者和状态查询
}
// ===== 下面是业务模型，与系统基础无关，可自行选择需要的模块删改 =====



/// Post model
model Post  extends Base {
    title     String  @length(1, 256)
    content   String
    published Boolean @default(false)
    author    User    @relation(fields: [authorId], references: [id])
    authorId  String

    // allow read for all signin users
    @@allow('read', auth() != null && published)
    // full access by author
    @@allow('all', author == auth())
}

/// AI 英语学习数据模型
model Word extends Base {
    /// word 的小写形式，作为唯一标识符
    key           String
    /// 单词原文
    word          String
    /// 记忆等级
    memoryLevel   Int      @default(0)
    /// 点击次数
    clickCount    Int      @default(0)
    /// 最后点击时间戳
    lastClickTime DateTime @default(now())
    /// 翻译列表（存储为JSON数组）
    translations  Json
    /// 总学习会话数
    totalSessions Int      @default(0)
    /// AI翻译（可选）
    aiTranslation String?
    /// 难度系数（可选）
    difficulty    Float?
    /// 例句列表（存储为JSON数组，可选）
    examples      Json?
    /// 语法信息（可选）
    grammar       String?
    /// 发音信息（可选）
    pronunciation String?

    /// 关联的用户
    author        User     @relation(fields: [authorId], references: [id])
    authorId      String
    /// 确保每个用户的单词key唯一
    @@unique([key, authorId])
    /// 权限控制：用户只能读取和操作自己的单词数据
    @@allow('read,create,update,delete', auth() == author)
}