// This is a sample model to get you started.

/// A sample data source using local sqlite db.
datasource db {
    provider = 'sqlite'
    url = 'file:./dev.db'
}

generator client {
    provider = "prisma-client-js"
    output   = "client"
}

///  https://zenstack.dev/docs/guides/multiple-schema#abstract-model-inheritance
// 控制所有模型的通用鉴权策略
abstract model BaseAuth {
    /// 通过多对多的关系来实现用户角色的鉴权，允许管理员角色进行所有操作
    @@allow('all', auth().role?[name == 'admin'])
    /// 禁止未登录用户进行任何操作
    @@deny('all', !auth())
}
// 控制一些通用附加字段（模型本身不会再定义这些字段）
abstract model BaseTime extends BaseAuth {
    created DateTime @default(now())
    updated DateTime @updatedAt
    // 禁止修改创建时间
    @@deny('update', future().created != created)
}
abstract model BaseId {
    id Int @id @default(autoincrement())
    // 禁止修改 id
    @@deny('update', future().id != id)
}
// 控制一些可能会被重写的字段，
abstract model Base extends BaseTime, BaseId {
}


/// 角色
model Role extends Base {
    name  String @unique
    users User[]
    @@allow("read",!!auth())
}

/// User model
model User extends BaseTime {
    id          String        @id @default(cuid())
    // 禁止修改 id
    @@allow('update', future().id == id)
    email       String        @unique @email @length(6, 32)
    password    String        @password @omit
    posts       Post[]
    role        Role[]

    userSession UserSession[]
    /// 允许用户读取和更新自己的信息
    @@allow('read', auth() == this)
    /// 禁止未登录用户进行任何操作
    @@deny('all', !auth())

    file        File[]
    avatar      String?
}

/// UserSession 用于存储用户的登录会话信息。每个会话都有一个唯一的 token 和过期时间。
model UserSession extends Base {
    token     String   @default(cuid())
    expiresAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id])

    /// 只允许用户读取和创建
    @@allow('read,create', auth() == user)
    @@deny('all',expiresAt < now())
}

// 存储策略枚举
enum StorageType {
    LOCAL
    S3
}
model File extends Base {
    filename    String      // 原始文件名
    mimetype    String      // 文件类型
    size        Int         // 文件大小（字节）
    path        String      // 存储路径或URL
    storageType StorageType // 存储类型
    key         String?     // 存储服务中的唯一标识符（如S3的key）
    bucket      String?     // 存储桶（适用于S3、OSS等）
    metadata    Json?       // 额外的元数据
    author      User        @relation(fields: [authorId], references: [id])
    authorId    String
    @@allow('read,create', auth() == author)
}


enum LogLevel {
    DEBUG
    INFO
    WARN
    ERROR
}
model SystemLog extends BaseId,BaseAuth {
    reqId      String
    level      LogLevel
    message    String?
    logs       Json?
    authUserId String?
    created    DateTime @default(now())
}


// ===== 下面是业务模型，与系统基础无关，可自行选择需要的模块删改 =====

/// Post model
model Post  extends Base {
    title     String  @length(1, 256)
    content   String
    published Boolean @default(false)
    author    User    @relation(fields: [authorId], references: [id])
    authorId  String

    // allow read for all signin users
    @@allow('read', auth() != null && published)
    // full access by author
    @@allow('all', author == auth())
}