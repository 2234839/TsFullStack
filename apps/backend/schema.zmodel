// This is a sample model to get you started.

/// A sample data source using local sqlite db.
datasource db {
    provider = 'sqlite'
    url = 'file:./dev.db'
}

generator client {
    provider = "prisma-client-js"
    output   = "client"
}

/// 所有模型的基类，包含创建时间和更新时间字段。
abstract model Common {
    created DateTime @default(now())
    updated DateTime @updatedAt
}

/// 角色
model Role extends Common {
    id    Int    @id @default(autoincrement())
    name  String @unique
    users User[]
    @@allow("read",!!auth())
}

/// User model
model User extends Common {
    id          String        @id @default(cuid())
    email       String        @unique @email @length(6, 32)
    password    String        @password @omit
    posts       Post[]
    role        Role[]

    userSession UserSession[]
    /// 允许用户读取和更新自己的信息
    @@allow('read,update', auth() == this)
    /// 通过多对多的关系来实现用户角色的鉴权，允许管理员角色进行所有操作
    @@allow('all', auth().role?[name == 'admin'])
}

/// 用户会话模型，用于存储用户的登录会话信息。每个会话都有一个唯一的 token 和过期时间。
model UserSession extends Common {
    id        String   @id @default(cuid())
    token     String   @default(cuid())
    expiresAt DateTime

    userId    String
    user      User     @relation(fields: [userId], references: [id])

    @@allow('all', auth().role?[name == 'admin'])
    @@allow('all', auth() == user)
}

/// Post model
model Post  extends Common {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @length(1, 256)
    content   String
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String

    // allow read for all signin users
    @@allow('read', auth() != null && published)

    // full access by author
    @@allow('all', author == auth())
}
