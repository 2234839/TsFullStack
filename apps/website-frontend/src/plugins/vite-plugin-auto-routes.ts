/** ABOUTME: Vite plugin for automatic route generation */
import type { Plugin } from 'vite'
import { readdirSync, existsSync, writeFileSync, mkdirSync } from 'fs'
import { join } from 'path'
import { fileURLToPath } from 'url'

interface VitePluginAutoRoutesOptions {
  /** 是否在开发模式下监听文件变化 */
  watch?: boolean
  /** 路由文件生成路径 */
  outputPath?: string
  /** 扫描的源码目录 */
  srcDir?: string
  /** 项目根目录 */
  projectsDir?: string
}

function findRouteFiles(dir: string, results: string[] = []): string[] {
  if (!existsSync(dir)) {
    return results
  }

  const files = readdirSync(dir, { withFileTypes: true })

  for (const file of files) {
    const fullPath = join(dir, file.name)

    if (file.isDirectory()) {
      findRouteFiles(fullPath, results)
    } else if (file.name.endsWith('.routeMap.ts')) {
      results.push(fullPath)
    }
  }

  return results
}

function generateRoutesContent(options: Required<VitePluginAutoRoutesOptions>): string {
  const { projectsDir } = options

  // 查找项目路由文件
  let projectRouteFiles: Array<{originalPath: string, projectName: string, varName: string}> = []
  const projectsFullPath = join(process.cwd(), projectsDir)

  if (existsSync(projectsFullPath)) {
    const projectDirs = readdirSync(projectsFullPath, { withFileTypes: true })

    for (const projectDir of projectDirs) {
      if (projectDir.isDirectory()) {
        // 优先查找项目根目录下的路由文件（简洁结构）
        const projectRootPath = join(projectsFullPath, projectDir.name)
        let files = findRouteFiles(projectRootPath)

        // 如果项目根目录下没有路由文件，则查找 routes 子目录（兼容旧结构）
        if (files.length === 0) {
          const routesPath = join(projectRootPath, 'routes')
          if (existsSync(routesPath)) {
            files = findRouteFiles(routesPath)
          }
        }

        for (const file of files) {
          console.log(`🔍 Found route file: ${file}`)
          const varName = projectDir.name.replace(/[^a-zA-Z0-9]/g, '')
          projectRouteFiles.push({
            originalPath: file,
            projectName: projectDir.name,
            varName
          })
        }
      }
    }
  }

  // 生成导入代码
  let content = `/** ABOUTME: Auto-generated frontend routes index */\n`
  content += `// Generated by vite-plugin-auto-routes\n`
  content += `// Generated at: ${new Date().toISOString()}\n`
  content += `// DO NOT EDIT !!! - This file is automatically generated\n\n`

  // 生成项目路由导入
  if (projectRouteFiles.length > 0) {
    content += `// 动态导入项目路由\n`
    projectRouteFiles.forEach(routeFile => {
      // 计算相对路径：从 src/routes/index.ts 到项目路由文件
      const relativePath = routeFile.originalPath.replace(process.cwd() + '/', '')
      content += `import * as ${routeFile.varName} from '../../${relativePath}';\n`
    })

    content += `\n/** 所有前端项目路由聚合 */\n`
    content += `export const routeModels = {\n`
    projectRouteFiles.forEach(routeFile => {
      content += `  ...${routeFile.varName}.default,\n`
    })
    content += `};\n\n`
  } else {
    content += `\n/** 空路由 */\n`
    content += `export const routeModels = {};\n\n`
  }

  // 生成路由统计信息
  content += `/** 路由统计信息 */\n`
  content += `export const routeStats = {\n`
  content += `  projectRoutes: ${projectRouteFiles.length},\n`
  content += `  generatedAt: '${new Date().toISOString()}'\n`
  content += `};\n\n`

  console.log(`🔄 Project routes updated: ${projectRouteFiles.length} total`)

  return content
}

export function vitePluginAutoRoutes(options: VitePluginAutoRoutesOptions = {}): Plugin {
  const resolvedOptions: Required<VitePluginAutoRoutesOptions> = {
    watch: true,
    outputPath: 'src/routes/index.ts',
    srcDir: 'src',
    projectsDir: 'projects',
    ...options
  }

  let isGenerating = false

  async function generateRoutes() {
    if (isGenerating) return
    isGenerating = true

    try {
      const content = generateRoutesContent(resolvedOptions)
      const outputPath = join(process.cwd(), resolvedOptions.outputPath)

      // 确保目录存在
      const dir = join(outputPath, '..')
      if (!existsSync(dir)) {
        mkdirSync(dir, { recursive: true })
      }

      writeFileSync(outputPath, content, 'utf8')
    } catch (error) {
      console.error('❌ Failed to generate routes:', error)
    } finally {
      isGenerating = false
    }
  }

  return {
    name: 'vite-plugin-auto-routes',
    configureServer(server) {
      // 初始生成
      generateRoutes()

      if (resolvedOptions.watch) {
        // 监听文件变化
        const watcher = server.watcher

        // 监听项目路由文件
        const projectsPath = join(process.cwd(), resolvedOptions.projectsDir)
        if (existsSync(projectsPath)) {
          // 监听新的简洁结构：项目根目录下的路由文件
          watcher.add(join(projectsPath, '**/*.routeMap.ts'))
          // 同时保持对旧结构的兼容性
          watcher.add(join(projectsPath, '**/routes/**/*.routeMap.ts'))
        }

        // 文件变化时重新生成
        watcher.on('change', (filePath) => {
          if (filePath.endsWith('.routeMap.ts')) {
            console.log(`📝 Route file changed: ${filePath}`)
            generateRoutes()
          }
        })

        watcher.on('add', (filePath) => {
          if (filePath.endsWith('.routeMap.ts')) {
            console.log(`➕ Route file added: ${filePath}`)
            generateRoutes()
          }
        })

        watcher.on('unlink', (filePath) => {
          if (filePath.endsWith('.routeMap.ts')) {
            console.log(`➖ Route file removed: ${filePath}`)
            generateRoutes()
          }
        })
      }
    },
    buildStart() {
      // 构建开始时生成路由
      generateRoutes()
    }
  }
}